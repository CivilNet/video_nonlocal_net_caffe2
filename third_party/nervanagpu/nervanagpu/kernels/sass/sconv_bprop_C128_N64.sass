# Kernel: sconv_bprop_C128_N64

# Copyright 2014 Nervana Systems Inc. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
# 
#    http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.


<CONSTANT_MAPPING>
    addr_zero  : 4x<128*8*2 + 64*8*2 + 0>
    addr_lut   : 4x<128*8*2 + 64*8*2 + 4>

    param_Rand[0]      : c[0x0][0x140]
    param_Rand[1]      : c[0x0][0x144]
    param_I[0]         : c[0x0][0x148]
    param_I[1]         : c[0x0][0x14c]
    param_F[0]         : c[0x0][0x150]
    param_F[1]         : c[0x0][0x154]
    param_E[0]         : c[0x0][0x158]
    param_E[1]         : c[0x0][0x15c]
    param_alpha        : c[0x0][0x160]
    param_flags        : c[0x0][0x164]
    param_N            : c[0x0][0x168]
    param_K            : c[0x0][0x16c]
    param_D            : c[0x0][0x170]
    param_H            : c[0x0][0x174]
    param_W            : c[0x0][0x178]
    param_WN           : c[0x0][0x17c]
    param_HWN          : c[0x0][0x180]
    param_DHWN         : c[0x0][0x184]
    param_C            : c[0x0][0x188]
    param_CRST         : c[0x0][0x18c]
    param_RST          : c[0x0][0x190]
    param_magic_RST    : c[0x0][0x194]
    param_shift_RST    : c[0x0][0x198]
    param_RS           : c[0x0][0x19c]
    param_magic_RS     : c[0x0][0x1a0]
    param_shift_RS     : c[0x0][0x1a4]
    param_S            : c[0x0][0x1a8]
    param_magic_S      : c[0x0][0x1ac]
    param_shift_S      : c[0x0][0x1b0]
    param_pad_d        : c[0x0][0x1b4]
    param_pad_h        : c[0x0][0x1b8]
    param_pad_w        : c[0x0][0x1bc]
    param_str_d        : c[0x0][0x1c0]
    param_str_h        : c[0x0][0x1c4]
    param_str_w        : c[0x0][0x1c8]
    param_P            : c[0x0][0x1cc]
    param_Q            : c[0x0][0x1d0]
    param_PQ           : c[0x0][0x1d4]
    param_QN           : c[0x0][0x1d8]
    param_PQN          : c[0x0][0x1dc]
    param_MPQN         : c[0x0][0x1e0]
    param_magic_Q      : c[0x0][0x1e4]
    param_shift_Q      : c[0x0][0x1e8]
    param_magic_PQ     : c[0x0][0x1ec]
    param_shift_PQ     : c[0x0][0x1f0]
    param_grid_P       : c[0x0][0x1f4]
    param_grid_Q       : c[0x0][0x1f8]
    param_grid_PQ      : c[0x0][0x1fc]
</CONSTANT_MAPPING>

<REGISTER_MAPPING>

    64-67  ~ m, p, q, N
    68-107 ~ blkMPQ, CRST, crst, n, tidFX, tidFY, tidEX, tidEY, tid1, te, tf0, tf4, magic_PQ, magic_Q, PQ, Q, QN, PQN, MPQN
    68-107 ~ HWN, WN, str_d, str_h, str_w, pad_d, pad_h, pad_w, c, t, r, s, mt, pr, qs, x, y, z, i, x0, xW, y0, yH, z0, zD, lutStore, rst, rs, warp_cnt, RS, S, magic_S, magic_RS

    0-63    : czero<00-63>

     3, 2,11,10,19,18,27,26 : cx<0-7>y0
     7, 6,15,14,23,22,31,30 : cx<0-7>y1
     1, 0, 9, 8,17,16,25,24 : cx<0-7>y2
     5, 4,13,12,21,20,29,28 : cx<0-7>y3
    35,34,43,42,51,50,59,58 : cx<0-7>y4
    39,38,47,46,55,54,63,62 : cx<0-7>y5
    33,32,41,40,49,48,57,56 : cx<0-7>y6
    37,36,45,44,53,52,61,60 : cx<0-7>y7

    64-79   : j0Ex<0-7>, j0Fy<0-7>
    80-95   : j1Ex<0-7>, j1Fy<0-7>

    96-107  : loadF<0-7>,  loadE<0-3>
    108-113 : track0F<0-1>, track4F<0-1>, trackE<0-1>

    114-122 ~ writeEs, writeFs, K, CRST8, MPQN8, swapBuf

    123-127 ~ tid, blkE, blkF, readEs, readFs

     // full
     64-81  : c<0-7>, trackI<0-1>, track00I<0-1>, track04I<0-1>, track08I<0-1>, track12I<0-1>
     82-122 ~ crst<00|04|08|12>, c<00|04|08|12>, lut<00|04|08|12>, chan<00|04|08|12>, img<00|04|08|12>, writeCs, readCs, magic_RST, RST, DHWN1, alpha, nn, tid31, tid96

</REGISTER_MAPPING>

--:-:1:-:1      S2R tid,    SR_TID.X;
--:-:2:-:1      S2R blkMPQ, SR_CTAID.Z;
--:-:3:-:1      S2R blkF,   SR_CTAID.Y;
--:-:4:-:1      S2R blkE,   SR_CTAID.X;

<SCHEDULE_BLOCK>
01:-:-:-:1      ISETP.GE.AND P0, PT, tid, 32, PT;

--:-:-:-:1      MOV CRST,        param_CRST;
--:-:-:-:1      MOV K,           param_K;
--:-:-:-:1      MOV N,           param_N;
--:-:-:-:1      MOV Q,           param_Q;
--:-:-:-:1      MOV PQ,          param_PQ;
--:-:-:-:1      MOV QN,          param_QN;
--:-:-:-:1      MOV PQN,         param_PQN;
--:-:-:-:1      MOV MPQN,        param_MPQN;
--:-:-:-:1      MOV magic_PQ,    param_magic_PQ;
--:-:-:-:1      MOV magic_Q,     param_magic_Q;

--:-:-:-:1      STS.128 [addr_zero], RZ;
<CODE>
    return join '', map sprintf("--:-:-:-:1      LDS.U.128 czero%02d, [addr_zero];\n", $_ * 4), 0..15;
</CODE>

// m      = blkMPQ / PQ
// blkMPQ = blkMPQ % PQ
02:-:-:-:1      XMAD.LO2 m, magic_PQ, blkMPQ, RZ;
--:-:-:-:1      SHR.U32 m, m, param_shift_PQ;
--:-:-:-:1      VMAD.U16.U16 blkMPQ, -m, PQ, blkMPQ;
// p = blkMPQ / Q
// q = blkMPQ % Q
--:-:-:-:1      XMAD.LO2 p, magic_Q, blkMPQ, RZ;
--:-:-:-:1      SHR.U32 p, p, param_shift_Q;
--:-:-:-:1      VMAD.U16.U16 q, -p, Q, blkMPQ;

--:-:-:-:1      SHL CRST8, CRST, 5;
--:-:-:-:1      SHL MPQN8, MPQN, 5;

// tidFX = (tid & 31) << 2
// tidFY = (tid >> 5)
--:-:-:-:1      LOP.AND tidFX, tid,  31;
--:-:-:-:1      SHL     tidFX, tidFX, 2;
--:-:-:-:1      SHR.U32 tidFY, tid,   5;
// tidEX = (tid & 15) << 2
// tidEY = (tid >> 4)
--:-:-:-:1      LOP.AND tidEX, tid,  15;
--:-:-:-:1      SHL     tidEX, tidEX, 2;
--:-:-:-:1      SHR.U32 tidEY, tid,   4;

// trackF = CRST*tidFY + blkF*128 + tidFX
04:-:-:-:1      ISCADD   crst, blkF, tidFX, 7;
--:-:-:-:1      ISETP.LT.AND P1, PT, crst, param_CRST, PT;

--:-:-:-:1      XMAD     tf0,  CRST, tidFY, crst;
--:-:-:-:1      ISCADD   tf4,  CRST, tf0,   2;
--:-:-:-:1      LEA      track0F0.CC, tf0, param_F[0],     2;
--:-:-:-:1      LEA.HI.X track0F1,    tf0, param_F[1], RZ, 2;
--:-:-:-:1      LEA      track4F0.CC, tf4, param_F[0],     2;
--:-:-:-:1      LEA.HI.X track4F1,    tf4, param_F[1], RZ, 2;

// trackE = E + tidEY*MPQN + m*PQN + p*QN + q*N + blkE*64 + tidEX
08:-:-:-:1      ISCADD   n, blkE, tidEX, 6;
--:-:-:-:1      ISETP.LT.AND P2, PT, n, param_N, PT;

--:-:-:-:1      XMAD.LO2 te, MPQN, tidEY, n;
--:-:-:-:1      XMAD.LO2 te, PQN,  m, te;
--:-:-:-:1      XMAD.LO2 te, QN,   p, te;
--:-:-:-:1      XMAD     te, N,    q, te;
--:-:-:-:1      LEA      trackE0.CC, te, param_E[0],     2;
--:-:-:-:0      LEA.HI.X trackE1,    te, param_E[1], RZ, 2;

// writeFs = (128*tidFY + tidFX) * 4
--:-:-:-:1      ISCADD  writeFs, tidFY, tidFX, 7;
--:-:-:-:1      SHL writeFs, writeFs, 2;

// writeEs = (64*tidEY + tidEX) * 4
--:-:-:-:1      ISCADD  writeEs, tidEY, tidEX, 6;
--:-:-:-:1      ISCADD  writeEs, writeEs, 4x<128*8>, 2;

// readFs  = (((tid & -16) >> 3) | (tid & 1)) << 4;
--:-:-:-:1      LOP.AND tid1,   tid,    1;
--:-:-:-:1      LOP.AND readFs, tid,   -16;
--:-:-:-:1      SHR.U32 readFs, readFs, 3;
--:-:-:-:1      LOP.OR  readFs, readFs, tid1;
--:-:-:-:1      SHL     readFs, readFs, 4;

// readEs = ((tid >> 1) & 7) << 4 + 4x<8*64>;
--:-:-:-:1      BFE.U32 readEs, tid,    0x301; // 3 bits at position 1
--:-:-:-:1      ISCADD  readEs, readEs, 4x<128*8>, 4;

--:-:-:-:1      MOV32I swapBuf, 4x<128*8 + 64*8>;

</SCHEDULE_BLOCK>

--:-:-:-:5  @P0 BRA.U END_SETUP;

<SCHEDULE_BLOCK>
--:-:-:-:1      MOV warp_cnt,    32;
--:-:-:-:1      MOV rst,         tid;
--:-:-:-:1      MOV RS,          param_RS;
--:-:-:-:1      MOV magic_RS,    param_magic_RS;
--:-:-:-:1      MOV S,           param_S;
--:-:-:-:1      MOV magic_S,     param_magic_S;
--:-:-:-:1      MOV pad_d,       param_pad_d;
--:-:-:-:1      MOV pad_h,       param_pad_h;
--:-:-:-:1      MOV pad_w,       param_pad_w;
--:-:-:-:1      MOV str_d,       param_str_d;
--:-:-:-:1      MOV str_h,       param_str_h;
--:-:-:-:1      MOV str_w,       param_str_w;
--:-:-:-:1      MOV WN,          param_WN;
--:-:-:-:1      MOV HWN,         param_HWN;
// mt = m * w - pad_d 
// pr = p * u - pad_h 
// qs = q * v - pad_w
--:-:-:-:1      VMAD.U16.U16 mt, m, str_d, -pad_d;
--:-:-:-:1      VMAD.U16.U16 pr, p, str_h, -pad_h;
--:-:-:-:1      VMAD.U16.U16 qs, q, str_w, -pad_w;
</SCHEDULE_BLOCK>

LUT_LOOP:

<SCHEDULE_BLOCK>
// warp synchronous loop while warp_cnt < RST (c=0)
--:-:-:-:1      ISETP.LT.AND P0, PT, warp_cnt, param_RST, PT;
--:-:-:-:1      IADD warp_cnt, warp_cnt, 32;
// t =  rst / RS
// rs = rst % RS
--:-:-:-:1      XMAD.LO2 t, magic_RS, rst, RZ;
--:-:-:-:1      SHR.U32 t, t, param_shift_RS;
--:-:-:-:1      VMAD.U16.U16 rs, -t, RS, rst;
// r = rs / S
// s = rs % S
--:-:-:-:1      XMAD.LO2 r, magic_S, rs, RZ;
--:-:-:-:1      SHR.U32 r, r, param_shift_S;
--:-:-:-:1      VMAD.U16.U16 s, -r, S, rs;
// x = qs + s
// y = pr + r
// z = mt + t
--:-:-:-:1      IADD x, qs, s;
--:-:-:-:1      IADD y, pr, r;
--:-:-:-:1      IADD z, mt, t;
// i = (z*HWN + y*WN + x*N) * 4
20:-:-:-:1      XMAD     i, N,   x, RZ;
--:-:-:-:1      XMAD.LO2 i, WN,  y, i;
--:-:-:-:1      XMAD.LO2 i, HWN, z, i;
--:-:-:-:1      SHL i, i, 2;
// Bounds check x and y, and make i negative if outside
--:-:-:-:1      ISET.LT.AND x0, x, RZ, PT;
--:-:-:-:1      ISET.GE.AND xW, x,  param_W, PT;
--:-:-:-:1      ISET.LT.AND y0, y, RZ, PT;
--:-:-:-:1      ISET.GE.AND yH, y,  param_H, PT;
--:-:-:-:1      ISET.LT.AND z0, z, RZ, PT;
--:-:-:-:1      ISET.GE.AND zD, z,  param_D, PT;
--:-:-:-:1      LOP3.LUT i, i, x0, xW, 0xfe;
<ORDERED>
--:-:-:-:1      LOP3.LUT i, i, y0, yH, 0xfe;
--:-:-:-:1      SHL lutStore, rst, 2;
--:-:-:-:1      IADD rst, rst, 32;
</ORDERED>
--:-:-:-:1      LOP3.LUT i, i, z0, zD, 0xfe;
// Store i imgOffset into the shared lookup table
--:6:-:-:1      STS [lutStore + addr_lut], i;
</SCHEDULE_BLOCK>

--:-:-:-:5  @P0 BRA.U LUT_LOOP;

END_SETUP:

20:-:1:-:1  @P1 LDG.E.CI.128 loadF0, [track0F];
--:-:2:-:1  @P1 LDG.E.CI.128 loadF4, [track4F];
--:-:-:-:1 @!P1 LDS.U.128    loadF0, [addr_zero];
--:-:5:-:1 @!P1 LDS.U.128    loadF4, [addr_zero];

--:-:3:-:1  @P2 LDG.E.CI.128 loadE0, [trackE];
--:-:6:-:1 @!P2 LDS.U.128    loadE0, [addr_zero];

11:-:-:-:1      STS.128 [writeFs + 4x<0*128>], loadF0;

--:-:-:-:6      IADD   track0F0.CC, track0F0, CRST8;
--:-:-:-:0      IADD.X track0F1,    track0F1, RZ;

02:-:-:-:1      STS.128 [writeFs + 4x<4*128>], loadF4;

--:-:-:-:6      IADD   track4F0.CC, track4F0, CRST8;
--:-:-:-:0      IADD.X track4F1,    track4F1, RZ;

24:-:-:-:1      STS.128 [writeEs], loadE0;

--:-:-:-:0      IADD   trackE0.CC, trackE0, MPQN8;

--:-:-:-:5      BAR.SYNC 0;
--:-:-:-:1      IADD writeEs, writeEs, swapBuf;
--:-:-:-:1      IADD writeFs, writeFs, swapBuf;
--:-:-:-:1      IADD swapBuf, RZ, -swapBuf;

--:-:-:-:0      IADD.X trackE1,    trackE1, RZ;

--:-:1:-:1      LDS.U.128 j0Ex0, [readEs + 4x<0*64  + 00>];
--:-:1:-:1      LDS.U.128 j0Fy0, [readFs + 4x<0*128 + 00>];
--:-:1:-:1      LDS.U.128 j0Ex4, [readEs + 4x<0*64  + 32>];
--:-:1:-:1      LDS.U.128 j0Fy4, [readFs + 4x<0*128 + 64>];

NEXT_8K:

--:-:-:-:1      ISETP.GE.AND P1, PT, K, 16, P1;
<CODE>

    my %insert =
    (
        j0c1  => "--:-:-:-:1      ISETP.GE.AND P2, PT, K, 16, P2;\n",
        j0c3  => "--:-:-:-:1      ISETP.GE.AND P0, PT, K, 16, PT;\n",
        j0c7  => "--:-:-:-:1      IADD K, K, -8;\n",

        j0c9  => "--:-:2:-:1  \@P1 LDG.E.CI.128 loadF0, [track0F];\n",
        j0c11 => "--:-:3:-:1  \@P1 LDG.E.CI.128 loadF4, [track4F];\n",
        j0c13 => "--:-:4:-:1  \@P2 LDG.E.CI.128 loadE0, [trackE];\n",

        j5c8  => "02:-:-:-:1  \@P0 STS.128 [writeFs + 4x<0*128>], loadF0;\n",

        j5c35 => "--:-:-:-:1  \@P1 IADD   track0F0.CC, track0F0, CRST8;\n",
        j5c40 => "--:-:-:-:1  \@P1 IADD.X track0F1,    track0F1, RZ;\n",

        j5c10 => "04:-:-:-:1  \@P0 STS.128 [writeFs + 4x<4*128>], loadF4;\n",

        j5c42 => "--:-:-:-:1  \@P1 IADD   track4F0.CC, track4F0, CRST8;\n",
        j5c47 => "--:-:-:-:1  \@P1 IADD.X track4F1,    track4F1, RZ;\n",

        j6c8  => "08:2:-:-:1  \@P0 STS.128 [writeEs], loadE0;\n",

        j6c42 => "--:-:-:-:1  \@P2 IADD   trackE0.CC, trackE0, MPQN8;\n",
        j6c47 => "--:-:-:-:1  \@P2 IADD.X trackE1,    trackE1, RZ;\n",

        j6c63 => "--:-:-:-:5  \@P0 BAR.SYNC 0;\n" .
                 "02:-:-:-:1  \@P0 IADD readEs,  readEs, -swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD readFs,  readFs, -swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD writeEs, writeEs, swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD writeFs, writeFs, swapBuf;\n" .
                 "--:-:-:-:1  \@P0 IADD swapBuf, RZ,     -swapBuf;\n",

        j7c63 => "--:-:-:Y:5  \@P0 BRA.U NEXT_8K;\n",
    );

    my @cOrder;
    my @swirl = ([0,2],[1,2],[1,0],[0,0]);
    my @y = (0,1,4,5);
    foreach my $x (0,2,4,6)
    {
        foreach my $y (@y)
        {
            push @cOrder, [$x + $_->[0], $y + $_->[1]] foreach @swirl;
        }
        @y = reverse @y;
    }

    my $out;
    foreach my $j (0 .. 7)
    {
        my $odd      = $j & 1;
        my $nOdd     = !$odd + 0;
        my $rsOffset = ($j + 1) % 8;
        my $rsPred   = $j == 7 ? '@P0' : '   ';

        $insert{"j${j}c0"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dEx0, [readEs + 4x<%d*64  + 00>];\n", $rsPred, $nOdd, $rsOffset;
        $insert{"j${j}c2"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dFy0, [readFs + 4x<%d*128 + 00>];\n", $rsPred, $nOdd, $rsOffset;
        $insert{"j${j}c4"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dEx4, [readEs + 4x<%d*64  + 32>];\n", $rsPred, $nOdd, $rsOffset;
        $insert{"j${j}c6"} = sprintf "--:-:1:-:1  %s LDS.U.128 j%dFy4, [readFs + 4x<%d*128 + 64>];\n", $rsPred, $nOdd, $rsOffset;

        foreach my $c (0 .. 63)
        {
            my ($x,$y) = @{$cOrder[$c]};

            my $ins    = $insert{"j${j}c$c"} || '';
            
            my $stall  = $ins =~ /LDS|I2F|LDG|STS|BAR|BRA/ ? 0 : 1;

            my $yield  = $c == 32 && $stall ? 'Y' : '-';

            my $wait   = $c == 0 ? '01' : '--';

            my $ctrl   = "$wait:-:-:$yield:$stall";

            $out .= sprintf "%s      FFMA cx%dy%d, j%dEx%d, j%dFy%d, cx%dy%d;\n%s", $ctrl,  $x,$y,  $odd,$x,  $odd,$y,  $x,$y,  $ins;
        }
    }
    return $out;

</CODE>

//--:-:-:-:5      EXIT;

<SCHEDULE_BLOCK>
--:-:-:-:1      MOV magic_RST, param_magic_RST;
--:-:-:-:1      MOV RST,       param_RST;
--:-:-:-:1      MOV DHWN1,     param_DHWN;
--:-:-:-:1      SHL DHWN1,     DHWN1, 2;

--:-:-:-:1      LOP.AND readEs, readEs, 0xff;
--:-:-:-:1      LOP.AND readFs, readFs, 0xff;

// writeCs = ((readIs / 4) * 64 + readEs);
--:-:-:-:1      ISCADD  writeCs, readFs, readEs, 4;


// readCs = ((tid & 96) << 3) | (tid & 31)   << 2;
--:-:-:-:1      LOP.AND tid31, tid, 31;
--:-:-:-:1      LOP.AND tid96, tid, 96;
--:-:-:-:1      ISCADD readCs, tid96, tid31, 3;
--:-:-:-:1      SHL    readCs, readCs, 2;

// nn = blkE*64 + tid31;
--:-:-:-:1      ISCADD nn, blkE, tid31, 6;

// crst = blkF*128 + (tid96 >> 1)
--:-:-:-:1      SHR.U32 crst00, tid96, 1;
--:-:-:-:1      ISCADD  crst00, blkF, crst00, 7;
--:-:-:-:1      IADD    crst04, crst00, 4;
--:-:-:-:1      IADD    crst08, crst00, 8;
--:-:-:-:1      IADD    crst12, crst00, 12;

--:-:-:-:1      LEA      trackI0.CC, nn, param_I[0],     0x2;
--:-:-:-:1      LEA.HI.X trackI1,    nn, param_I[1], RZ, 0x2;

--:-:-:-:1      MOV alpha, param_alpha;

// n < N
--:-:-:-:1      ISETP.LT.AND P5, PT, nn, param_N, PT;
--:-:-:-:1      IADD nn, nn, 32;
--:-:-:-:0      ISETP.LT.AND P6, PT, nn, param_N, PT;
</SCHEDULE_BLOCK>

--:-:-:-:5      BAR.SYNC 0;

<CODE>

    my $out;
    foreach my $y (0..7)
    {
        $out .=
            "--:-:-:-:1      IADD crst00, crst00, 60;\n" .
            "--:-:-:-:1      IADD crst04, crst04, 60;\n" .
            "--:-:-:-:1      IADD crst08, crst08, 60;\n" .
            "--:-:-:-:1      IADD crst12, crst12, 60;\n" if $y == 4;

        $out .= sprintf(
            "01:-:-:-:1      FMUL c0, cx0y%d, alpha;\n" .
            "--:-:-:-:1      FMUL c1, cx1y%d, alpha;\n" .
            "02:-:-:-:1      FMUL c2, cx2y%d, alpha;\n" .
            "--:-:-:-:1      FMUL c3, cx3y%d, alpha;\n" .
            "04:-:-:-:1      FMUL c4, cx4y%d, alpha;\n" .
            "--:-:-:-:1      FMUL c5, cx5y%d, alpha;\n" .
            "08:-:-:-:1      FMUL c6, cx6y%d, alpha;\n" .
            "--:-:-:-:0      FMUL c7, cx7y%d, alpha;\n",
            ($y) x 8);

        $out .= "--:-:-:-:5      CAL STORE_C;\n\n";
    }
    return $out;

</CODE>

--:-:-:-:5      EXIT;

STORE_C:

// Warp shuffle to drop the awkward readAs/readBs mapping
--:-:-:-:1      STS.128 [writeCs+4x<00>], c0;
--:-:-:-:1      STS.128 [writeCs+4x<32>], c4;

--:-:-:-:1      LDS c0, [readCs + 4x<0*64 + 00>];
--:-:-:-:1      LDS c1, [readCs + 4x<0*64 + 32>];
--:-:-:-:1      LDS c2, [readCs + 4x<1*64 + 00>];
--:-:-:-:1      LDS c3, [readCs + 4x<1*64 + 32>];
--:-:-:-:1      LDS c4, [readCs + 4x<2*64 + 00>];
--:-:-:-:1      LDS c5, [readCs + 4x<2*64 + 32>];
--:-:-:-:1      LDS c6, [readCs + 4x<3*64 + 00>];
--:-:5:-:1      LDS c7, [readCs + 4x<3*64 + 32>];

<SCHEDULE_BLOCK>
--:-:-:-:1      ISETP.LT.AND P0, PT, crst00, param_CRST, P5;
--:-:-:-:1      ISETP.LT.AND P1, PT, crst04, param_CRST, P5;
--:-:-:-:1      ISETP.LT.AND P2, PT, crst08, param_CRST, P5;
--:-:-:-:1      ISETP.LT.AND P3, PT, crst12, param_CRST, P5;

--:-:-:-:1      XMAD.LO2 c00, magic_RST, crst00, RZ;
--:-:-:-:1      XMAD.LO2 c04, magic_RST, crst04, RZ;
--:-:-:-:1      XMAD.LO2 c08, magic_RST, crst08, RZ;
--:-:-:-:1      XMAD.LO2 c12, magic_RST, crst12, RZ;

--:-:-:-:1      SHR.U32 c00, c00, param_shift_RST;
--:-:-:-:1      SHR.U32 c04, c04, param_shift_RST;
--:-:-:-:1      SHR.U32 c08, c08, param_shift_RST;
--:-:-:-:1      SHR.U32 c12, c12, param_shift_RST;

--:-:-:-:1      VMAD.U16.U16 lut00, -c00, RST, crst00;
--:-:-:-:1      VMAD.U16.U16 lut04, -c04, RST, crst04;
--:-:-:-:1      VMAD.U16.U16 lut08, -c08, RST, crst08;
--:-:-:-:1      VMAD.U16.U16 lut12, -c12, RST, crst12;

--:-:-:-:1      SHL lut00, lut00, 2;
--:-:-:-:1      SHL lut04, lut04, 2;
--:-:-:-:1      SHL lut08, lut08, 2;
--:-:-:-:1      SHL lut12, lut12, 2;

--:-:-:-:1      XMAD.LO2 chan00, DHWN1, c00, RZ;
--:-:-:-:1      XMAD.LO2 chan04, DHWN1, c04, RZ;
--:-:-:-:1      XMAD.LO2 chan08, DHWN1, c08, RZ;
--:-:-:-:1      XMAD.LO2 chan12, DHWN1, c12, RZ;

--:-:-:-:1      IADD crst00, crst00, 1;
--:-:-:-:1      IADD crst04, crst04, 1;
--:-:-:-:1      IADD crst08, crst08, 1;
--:-:-:-:1      IADD crst12, crst12, 1;

--:-:1:-:1  @P0 LDS img00, [lut00 + addr_lut];
--:-:2:-:1  @P1 LDS img04, [lut04 + addr_lut];
--:-:3:-:1  @P2 LDS img08, [lut08 + addr_lut];
--:-:4:-:1  @P3 LDS img12, [lut12 + addr_lut];

</SCHEDULE_BLOCK>

11:-:-:-:1      IADD3  track00I0.CC, trackI0, img00, chan00;
--:-:-:-:5      ISETP.GE.AND P0, PT, img00, RZ, P0;
--:-:-:-:1      IADD.X track00I1,    trackI1, RZ;

02:-:-:-:1      IADD3  track04I0.CC, trackI0, img04, chan04;
--:-:-:-:5      ISETP.GE.AND P1, PT, img04, RZ, P1;
--:-:-:-:1      IADD.X track04I1,    trackI1, RZ;

04:-:-:-:1      IADD3  track08I0.CC, trackI0, img08, chan08;
--:-:-:-:5      ISETP.GE.AND P2, PT, img08, RZ, P2;
--:-:-:-:1      IADD.X track08I1,    trackI1, RZ;

08:-:-:-:1      IADD3  track12I0.CC, trackI0, img12, chan12;
--:-:-:-:5      ISETP.GE.AND P3, PT, img12, RZ, P3;
--:-:-:-:0      IADD.X track12I1,    trackI1, RZ;

--:-:-:-:1  @P0 RED.E.ADD.F32.FTZ.RN [track00I], c0;
--:-:-:-:1      PSETP.AND.AND P0, PT, P0, P6, PT;
--:-:-:-:1  @P1 RED.E.ADD.F32.FTZ.RN [track04I], c2;
--:-:-:-:1      PSETP.AND.AND P1, PT, P1, P6, PT;
--:-:-:-:1  @P2 RED.E.ADD.F32.FTZ.RN [track08I], c4;
--:-:-:-:3      PSETP.AND.AND P2, PT, P2, P6, PT;
--:-:-:-:1  @P3 RED.E.ADD.F32.FTZ.RN [track12I], c6;
--:-:-:-:5      PSETP.AND.AND P3, PT, P3, P6, PT;

--:1:-:-:2  @P0 RED.E.ADD.F32.FTZ.RN [track00I + 4x<32>], c1;
--:2:-:-:2  @P1 RED.E.ADD.F32.FTZ.RN [track04I + 4x<32>], c3;
--:3:-:-:4  @P2 RED.E.ADD.F32.FTZ.RN [track08I + 4x<32>], c5;
--:4:-:-:1  @P3 RED.E.ADD.F32.FTZ.RN [track12I + 4x<32>], c7;

--:-:-:-:5      RET;

