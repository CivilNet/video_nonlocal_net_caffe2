# Loss functions

- name: binary_cross_entropy(Tensor self, Tensor target, Tensor weight={}, bool size_average=true, bool reduce=true)
  cname: BCECriterion
  scalar_check:
    output: reduce || self_->isScalar()

- name: kl_div(Tensor self, Tensor target, bool size_average=true, bool reduce=true)
  cname: DistKLDivCriterion
  scalar_check:
    output: reduce || self_->isScalar()

- name: l1_loss(Tensor self, Tensor target, bool size_average=true, bool reduce=True)
  cname: AbsCriterion
  scalar_check:
    output: reduce || self_->isScalar()

- name: mse_loss(Tensor self, Tensor target, bool size_average=true, bool reduce=true)
  cname: MSECriterion
  scalar_check:
    output: reduce || self_->isScalar()

- name: multi_margin_loss(Tensor self, LongTensor target, Scalar p=1, Scalar margin=1, Tensor weight={}, bool size_average=true, bool reduce=true)
  cname: MultiMarginCriterion
  scalar_check:
    output: reduce || self_->isScalar()

- name: multilabel_margin_loss(Tensor self, LongTensor target, bool size_average=true, bool reduce=true)
  cname: MultiLabelMarginCriterion
  buffers: [is_target]
  scalar_check:
    output: reduce || self_->isScalar()
    is_target: target_->isScalar()

- name: nll_loss(Tensor self, LongTensor target, Tensor weight={}, bool size_average=true, int64_t ignore_index=-100, bool reduce=True)
  cname: ClassNLLCriterion
  buffers: [total_weight]
  scalar_check:
    output: reduce || self_->isScalar()
    total_weight: 'true'

- name: nll_loss2d(Tensor self, LongTensor target, Tensor weight={}, bool size_average=true, int64_t ignore_index=-100, bool reduce=True)
  cname: SpatialClassNLLCriterion
  buffers: [total_weight]
  scalar_check:
    output: reduce || self_->isScalar()
    total_weight: 'true'

- name: smooth_l1_loss(Tensor self, Tensor target, bool size_average=true, bool reduce=true)
  cname: SmoothL1Criterion
  scalar_check:
    output: reduce || self_->isScalar()

- name: soft_margin_loss(Tensor self, Tensor target, bool size_average=true, bool reduce=true)
  cname: SoftMarginCriterion
  scalar_check:
    output: reduce || self_->isScalar()

# Activation functions

- name: elu(Tensor self, Scalar alpha=1, Scalar scale=1)
  cname: ELU
  has_inplace: True
  scalar_check:
    output: self_->isScalar()
    grad_input: output_->isScalar()

- name: glu(Tensor self, int64_t dim=-1)
  cname: GatedLinear
  wrap_dim:
    dim: self
  scalar_check:
    output: 'false'

- name: hardshrink(Tensor self, Scalar lambd=0.5)
  cname: HardShrink
  scalar_check:
    output: self_->isScalar()

- name: hardtanh(Tensor self, Scalar min_val=-1, Scalar max_val=1)
  cname: HardTanh
  has_inplace: True
  scalar_check:
    output: self_->isScalar()

- name: leaky_relu(Tensor self, Scalar negative_slope=0.01)
  cname: LeakyReLU
  has_inplace: True
  scalar_check:
    output: self_->isScalar()

- name: log_sigmoid(Tensor self)
  cname: LogSigmoid
  buffers: [buffer]
  scalar_check:
    output: self_->isScalar()
    buffer: self_->isScalar()

- name: log_softmax(Tensor self, int64_t dim)
  cname: LogSoftMax
  wrap_dim:
    dim: self
  scalar_check:
    output: self_->isScalar()

- name: prelu(Tensor self, Tensor weight)
  cname: PReLU
  scalar_check:
    output: self_->isScalar()

# NOTE: we treat noise as an input (it's really a buffer) because the codegen
# can't handle in-place functions that have buffers
- name: rrelu_with_noise(Tensor self, Tensor noise, Scalar lower=0.125, Scalar upper=0.3333333333333333, bool training=false, Generator* generator=nullptr)
  cname: RReLU
  has_inplace: True
  scalar_check:
    output: self_->isScalar()

- name: softmax(Tensor self, int64_t dim)
  cname: SoftMax
  wrap_dim:
    dim: self
  scalar_check:
    output: self_->isScalar()

- name: softplus(Tensor self, Scalar beta=1, Scalar threshold=20)
  cname: SoftPlus
  scalar_check:
    output: self_->isScalar()

- name: softshrink(Tensor self, Scalar lambd=0.5)
  cname: SoftShrink
  scalar_check:
    output: self_->isScalar()

- name: threshold(Tensor self, Scalar threshold, Scalar value)
  cname: Threshold
  has_inplace: True
  scalar_check:
    output: self_->isScalar()

# Pooling

- name: adaptive_avg_pool2d(Tensor self, IntList[2] output_size)
  cname: SpatialAdaptiveAveragePooling

- name: adaptive_avg_pool3d(Tensor self, IntList[3] output_size)
  cname: VolumetricAdaptiveAveragePooling

- name: adaptive_max_pool2d(Tensor self, IntList[2] output_size)
  cname: SpatialAdaptiveMaxPooling

- name: adaptive_max_pool3d(Tensor self, IntList[3] output_size)
  cname: VolumetricAdaptiveMaxPooling

- name: avg_pool2d(Tensor self, IntList[2] kernel_size, IntList[2] stride={}, IntList[2] padding=0, bool ceil_mode=false, bool count_include_pad=false)
  cname: SpatialAveragePooling
  default_init:
    stride: kernel_size

- name: avg_pool3d(Tensor self, IntList[3] kernel_size, IntList[3] stride={}, IntList[3] padding=0, bool ceil_mode=false, bool count_include_pad=false)
  cname: VolumetricAveragePooling
  default_init:
    stride: kernel_size

- name: fractional_max_pool2d(Tensor self, IntList[2] kernel_size, IntList[2] output_size, Tensor random_samples)
  cname: SpatialFractionalMaxPooling
  scalar_check:
    output: 'false'

- name: max_pool2d(Tensor self, IntList[2] kernel_size, IntList[2] stride={}, IntList[2] padding=0, IntList[2] dilation=1, bool ceil_mode=false)
  cname: SpatialDilatedMaxPooling
  default_init:
    stride: kernel_size

- name: max_pool3d(Tensor self, IntList[3] kernel_size, IntList[3] stride={}, IntList[3] padding=0, IntList[3] dilation=1, bool ceil_mode=false)
  cname: VolumetricDilatedMaxPooling
  default_init:
    stride: kernel_size

- name: max_unpool2d(Tensor self, LongTensor indices, IntList[2] output_size)
  cname: SpatialMaxUnpooling

- name: max_unpool3d(Tensor self, LongTensor indices, IntList[3] output_size, IntList[3] stride, IntList[3] padding)
  cname: VolumetricMaxUnpooling

# Padding

- name: reflection_pad1d(Tensor self, IntList[2] padding)
  cname: TemporalReflectionPadding

- name: reflection_pad2d(Tensor self, IntList[4] padding)
  cname: SpatialReflectionPadding

- name: replication_pad1d(Tensor self, IntList[2] padding)
  cname: TemporalReplicationPadding

- name: replication_pad2d(Tensor self, IntList[4] padding)
  cname: SpatialReplicationPadding

- name: replication_pad3d(Tensor self, IntList[6] padding)
  cname: VolumetricReplicationPadding

# Upsampling

# Note: The upsampling backwards functions also include an IntList input_size
# parameter, which is added by nn_parse.py

- name: upsample_linear1d(Tensor self, IntList[1] output_size, bool align_corners)
  cname: TemporalUpSamplingLinear
  scalar_check:
    grad_input: 'false'

- name: upsample_bilinear2d(Tensor self, IntList[2] output_size, bool align_corners)
  cname: SpatialUpSamplingBilinear
  scalar_check:
    grad_input: 'false'

- name: upsample_trilinear3d(Tensor self, IntList[3] output_size, bool align_corners)
  cname: VolumetricUpSamplingTrilinear
  scalar_check:
    grad_input: 'false'

- name: upsample_nearest1d(Tensor self, int64_t scale_factor)
  cname: TemporalUpSamplingNearest

- name: upsample_nearest2d(Tensor self, int64_t scale_factor)
  cname: SpatialUpSamplingNearest

- name: upsample_nearest3d(Tensor self, int64_t scale_factor)
  cname: VolumetricUpSamplingNearest


# Private functions. These also exist in TH, but we want the backwards functions
# to implement derivatives.

- name: _sigmoid(Tensor self)
  cname: Sigmoid
  scalar_check:
    output: self_->isScalar()
    grad_input: output_->isScalar()

- name: _tanh(Tensor self)
  cname: Tanh
  scalar_check:
    output: self_->isScalar()
    grad_input: output_->isScalar()

# Batch normalization

# The buffers here are somewhat hazardous, because their type will be
# based off of self, even though you may plausibly wish running_mean
# and running_var to have different precision than self (e.g.,
# BatchNorm on half).  Fortunately, THNN doesn't actually ever do this,
# so the buffer allocation code is "correct".  If you ever do fix this,
# you should just port the function entirely to a native ATen function.
- name: thnn_batch_norm(Tensor self, Tensor weight, Tensor bias, Tensor running_mean, Tensor running_var, bool training, double momentum, double eps)
  cname: BatchNormalization
  buffers: [save_mean, save_std]

# Convolutions

- name: thnn_conv_transpose2d(Tensor self, Tensor weight, IntList[2] kernel_size, Tensor bias={}, IntList[2] stride=1, IntList[2] padding=0, IntList[2] output_padding=0, IntList[2] dilation=1)
  cname: SpatialFullDilatedConvolution
  buffers: [columns, ones]

- name: thnn_conv_transpose3d(Tensor self, Tensor weight, IntList[3] kernel_size, Tensor bias={}, IntList[3] stride=1, IntList[3] padding=0, IntList[3] output_padding=0, IntList[3] dilation=1)
  cname: VolumetricFullDilatedConvolution
  buffers: [finput, fgrad_input]

- name: thnn_conv2d(Tensor self, Tensor weight, IntList[2] kernel_size, Tensor bias={}, IntList[2] stride=1, IntList[2] padding=0)
  cname: SpatialConvolutionMM
  buffers: [finput, fgrad_input]

- name: thnn_conv_depthwise2d(Tensor self, Tensor weight, IntList[2] kernel_size, Tensor bias={}, IntList[2] stride=1, IntList[2] padding=0, IntList[2] dilation=1)
  cname: SpatialDepthwiseConvolution
  buffers: []

- name: thnn_conv3d(Tensor self, Tensor weight, IntList[3] kernel_size, Tensor bias={}, IntList[3] stride=1, IntList[3] padding=0)
  cname: VolumetricConvolutionMM
  buffers: [finput, fgrad_input]

- name: thnn_conv_dilated2d(Tensor self, Tensor weight, IntList[2] kernel_size, Tensor bias={}, IntList[2] stride=1, IntList[2] padding=0, IntList[2] dilation=1)
  cname: SpatialDilatedConvolution
  buffers: [columns, ones]

- name: thnn_conv_dilated3d(Tensor self, Tensor weight, IntList[3] kernel_size, Tensor bias={}, IntList[3] stride=1, IntList[3] padding=0, IntList[3] dilation=1)
  cname: VolumetricDilatedConvolution
  buffers: [columns, ones]
