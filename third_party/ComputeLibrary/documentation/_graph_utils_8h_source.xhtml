<!-- HTML header for doxygen 1.8.9.1-->
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<meta name="robots" content="NOINDEX, NOFOLLOW" /> <!-- Prevent indexing by search engines -->
<title>Compute Library: utils/GraphUtils.h Source File</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="navtree.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="resize.js"></script>
<script type="text/javascript" src="navtreedata.js"></script>
<script type="text/javascript" src="navtree.js"></script>
<script type="text/javascript">
  $(document).ready(initResizable);
  $(window).load(resizeHeight);
</script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<script type="text/x-mathjax-config">
  MathJax.Hub.Config({
    extensions: ["tex2jax.js"],
    jax: ["input/TeX","output/HTML-CSS"],
});
</script><script type="text/javascript" src="http://cdn.mathjax.org/mathjax/latest/MathJax.js"></script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td style="padding-left: 0.5em;">
   <div id="projectname">Compute Library
   &#160;<span id="projectnumber">18.01</span>
   </div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.xhtml"><span>Main&#160;Page</span></a></li>
      <li><a href="pages.xhtml"><span>Related&#160;Pages</span></a></li>
      <li><a href="namespaces.xhtml"><span>Namespaces</span></a></li>
      <li><a href="annotated.xhtml"><span>Data&#160;Structures</span></a></li>
      <li class="current"><a href="files.xhtml"><span>Files</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
  <div id="navrow2" class="tabs2">
    <ul class="tablist">
      <li><a href="files.xhtml"><span>File&#160;List</span></a></li>
      <li><a href="globals.xhtml"><span>Globals</span></a></li>
    </ul>
  </div>
</div><!-- top -->
<div id="side-nav" class="ui-resizable side-nav-resizable">
  <div id="nav-tree">
    <div id="nav-tree-contents">
      <div id="nav-sync" class="sync"></div>
    </div>
  </div>
  <div id="splitbar" style="-moz-user-select:none;" 
       class="ui-resizable-handle">
  </div>
</div>
<script type="text/javascript">
$(document).ready(function(){initNavTree('_graph_utils_8h_source.xhtml','');});
</script>
<div id="doc-content">
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">GraphUtils.h</div>  </div>
</div><!--header-->
<div class="contents">
<a href="_graph_utils_8h.xhtml">Go to the documentation of this file.</a><div class="fragment"><div class="line"><a name="l00001"></a><span class="lineno">    1</span>&#160;<span class="comment">/*</span></div><div class="line"><a name="l00002"></a><span class="lineno">    2</span>&#160;<span class="comment"> * Copyright (c) 2017-2018 ARM Limited.</span></div><div class="line"><a name="l00003"></a><span class="lineno">    3</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00004"></a><span class="lineno">    4</span>&#160;<span class="comment"> * SPDX-License-Identifier: MIT</span></div><div class="line"><a name="l00005"></a><span class="lineno">    5</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00006"></a><span class="lineno">    6</span>&#160;<span class="comment"> * Permission is hereby granted, free of charge, to any person obtaining a copy</span></div><div class="line"><a name="l00007"></a><span class="lineno">    7</span>&#160;<span class="comment"> * of this software and associated documentation files (the &quot;Software&quot;), to</span></div><div class="line"><a name="l00008"></a><span class="lineno">    8</span>&#160;<span class="comment"> * deal in the Software without restriction, including without limitation the</span></div><div class="line"><a name="l00009"></a><span class="lineno">    9</span>&#160;<span class="comment"> * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or</span></div><div class="line"><a name="l00010"></a><span class="lineno">   10</span>&#160;<span class="comment"> * sell copies of the Software, and to permit persons to whom the Software is</span></div><div class="line"><a name="l00011"></a><span class="lineno">   11</span>&#160;<span class="comment"> * furnished to do so, subject to the following conditions:</span></div><div class="line"><a name="l00012"></a><span class="lineno">   12</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00013"></a><span class="lineno">   13</span>&#160;<span class="comment"> * The above copyright notice and this permission notice shall be included in all</span></div><div class="line"><a name="l00014"></a><span class="lineno">   14</span>&#160;<span class="comment"> * copies or substantial portions of the Software.</span></div><div class="line"><a name="l00015"></a><span class="lineno">   15</span>&#160;<span class="comment"> *</span></div><div class="line"><a name="l00016"></a><span class="lineno">   16</span>&#160;<span class="comment"> * THE SOFTWARE IS PROVIDED &quot;AS IS&quot;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR</span></div><div class="line"><a name="l00017"></a><span class="lineno">   17</span>&#160;<span class="comment"> * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,</span></div><div class="line"><a name="l00018"></a><span class="lineno">   18</span>&#160;<span class="comment"> * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE</span></div><div class="line"><a name="l00019"></a><span class="lineno">   19</span>&#160;<span class="comment"> * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER</span></div><div class="line"><a name="l00020"></a><span class="lineno">   20</span>&#160;<span class="comment"> * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,</span></div><div class="line"><a name="l00021"></a><span class="lineno">   21</span>&#160;<span class="comment"> * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE</span></div><div class="line"><a name="l00022"></a><span class="lineno">   22</span>&#160;<span class="comment"> * SOFTWARE.</span></div><div class="line"><a name="l00023"></a><span class="lineno">   23</span>&#160;<span class="comment"> */</span></div><div class="line"><a name="l00024"></a><span class="lineno">   24</span>&#160;<span class="preprocessor">#ifndef __ARM_COMPUTE_GRAPH_UTILS_H__</span></div><div class="line"><a name="l00025"></a><span class="lineno">   25</span>&#160;<span class="preprocessor">#define __ARM_COMPUTE_GRAPH_UTILS_H__</span></div><div class="line"><a name="l00026"></a><span class="lineno">   26</span>&#160;</div><div class="line"><a name="l00027"></a><span class="lineno">   27</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_pixel_value_8h.xhtml">arm_compute/core/PixelValue.h</a>&quot;</span></div><div class="line"><a name="l00028"></a><span class="lineno">   28</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_graph_8h.xhtml">arm_compute/graph/Graph.h</a>&quot;</span></div><div class="line"><a name="l00029"></a><span class="lineno">   29</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="_i_tensor_accessor_8h.xhtml">arm_compute/graph/ITensorAccessor.h</a>&quot;</span></div><div class="line"><a name="l00030"></a><span class="lineno">   30</span>&#160;<span class="preprocessor">#include &quot;<a class="code" href="arm__compute_2graph_2_types_8h.xhtml">arm_compute/graph/Types.h</a>&quot;</span></div><div class="line"><a name="l00031"></a><span class="lineno">   31</span>&#160;</div><div class="line"><a name="l00032"></a><span class="lineno">   32</span>&#160;<span class="preprocessor">#include &lt;random&gt;</span></div><div class="line"><a name="l00033"></a><span class="lineno">   33</span>&#160;<span class="preprocessor">#include &lt;string&gt;</span></div><div class="line"><a name="l00034"></a><span class="lineno">   34</span>&#160;<span class="preprocessor">#include &lt;vector&gt;</span></div><div class="line"><a name="l00035"></a><span class="lineno">   35</span>&#160;</div><div class="line"><a name="l00036"></a><span class="lineno">   36</span>&#160;<span class="keyword">namespace </span><a class="code" href="namespacearm__compute.xhtml">arm_compute</a></div><div class="line"><a name="l00037"></a><span class="lineno">   37</span>&#160;{</div><div class="line"><a name="l00038"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml">   38</a></span>&#160;<span class="keyword">namespace </span>graph_utils</div><div class="line"><a name="l00039"></a><span class="lineno">   39</span>&#160;{</div><div class="line"><a name="l00041"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml">   41</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml">PPMWriter</a> : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div><div class="line"><a name="l00042"></a><span class="lineno">   42</span>&#160;{</div><div class="line"><a name="l00043"></a><span class="lineno">   43</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00049"></a><span class="lineno">   49</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#a9ea94bf5b7d00ddb836df1b8dcedb93a">PPMWriter</a>(std::string name, <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maximum = 1);</div><div class="line"><a name="l00051"></a><span class="lineno">   51</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#a9ea94bf5b7d00ddb836df1b8dcedb93a">PPMWriter</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml">PPMWriter</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00052"></a><span class="lineno">   52</span>&#160;</div><div class="line"><a name="l00053"></a><span class="lineno">   53</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div><div class="line"><a name="l00054"></a><span class="lineno">   54</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor) <span class="keyword">override</span>;</div><div class="line"><a name="l00055"></a><span class="lineno">   55</span>&#160;</div><div class="line"><a name="l00056"></a><span class="lineno">   56</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00057"></a><span class="lineno">   57</span>&#160;    <span class="keyword">const</span> std::string _name;</div><div class="line"><a name="l00058"></a><span class="lineno">   58</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      _iterator;</div><div class="line"><a name="l00059"></a><span class="lineno">   59</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span>      _maximum;</div><div class="line"><a name="l00060"></a><span class="lineno">   60</span>&#160;};</div><div class="line"><a name="l00061"></a><span class="lineno">   61</span>&#160;</div><div class="line"><a name="l00063"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml">   63</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml">DummyAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div><div class="line"><a name="l00064"></a><span class="lineno">   64</span>&#160;{</div><div class="line"><a name="l00065"></a><span class="lineno">   65</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00070"></a><span class="lineno">   70</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml">DummyAccessor</a>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> maximum = 1);</div><div class="line"><a name="l00072"></a><span class="lineno">   72</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml">DummyAccessor</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml">DummyAccessor</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00073"></a><span class="lineno">   73</span>&#160;</div><div class="line"><a name="l00074"></a><span class="lineno">   74</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div><div class="line"><a name="l00075"></a><span class="lineno">   75</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor) <span class="keyword">override</span>;</div><div class="line"><a name="l00076"></a><span class="lineno">   76</span>&#160;</div><div class="line"><a name="l00077"></a><span class="lineno">   77</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00078"></a><span class="lineno">   78</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _iterator;</div><div class="line"><a name="l00079"></a><span class="lineno">   79</span>&#160;    <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> _maximum;</div><div class="line"><a name="l00080"></a><span class="lineno">   80</span>&#160;};</div><div class="line"><a name="l00081"></a><span class="lineno">   81</span>&#160;</div><div class="line"><a name="l00083"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_p_p_m_accessor.xhtml">   83</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_accessor.xhtml">PPMAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div><div class="line"><a name="l00084"></a><span class="lineno">   84</span>&#160;{</div><div class="line"><a name="l00085"></a><span class="lineno">   85</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00097"></a><span class="lineno">   97</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_accessor.xhtml">PPMAccessor</a>(std::string ppm_path, <span class="keywordtype">bool</span> bgr = <span class="keyword">true</span>,</div><div class="line"><a name="l00098"></a><span class="lineno">   98</span>&#160;                <span class="keywordtype">float</span> mean_r = 0.0f, <span class="keywordtype">float</span> mean_g = 0.0f, <span class="keywordtype">float</span> mean_b = 0.0f,</div><div class="line"><a name="l00099"></a><span class="lineno">   99</span>&#160;                <span class="keywordtype">float</span> std_r = 1.f, <span class="keywordtype">float</span> std_g = 1.f, <span class="keywordtype">float</span> std_b = 1.f);</div><div class="line"><a name="l00101"></a><span class="lineno">  101</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_accessor.xhtml">PPMAccessor</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_accessor.xhtml">PPMAccessor</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00102"></a><span class="lineno">  102</span>&#160;</div><div class="line"><a name="l00103"></a><span class="lineno">  103</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div><div class="line"><a name="l00104"></a><span class="lineno">  104</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor) <span class="keyword">override</span>;</div><div class="line"><a name="l00105"></a><span class="lineno">  105</span>&#160;</div><div class="line"><a name="l00106"></a><span class="lineno">  106</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00107"></a><span class="lineno">  107</span>&#160;    <span class="keyword">const</span> std::string _ppm_path;</div><div class="line"><a name="l00108"></a><span class="lineno">  108</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">bool</span>        _bgr;</div><div class="line"><a name="l00109"></a><span class="lineno">  109</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       _mean_r;</div><div class="line"><a name="l00110"></a><span class="lineno">  110</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       _mean_g;</div><div class="line"><a name="l00111"></a><span class="lineno">  111</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       _mean_b;</div><div class="line"><a name="l00112"></a><span class="lineno">  112</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       _std_r;</div><div class="line"><a name="l00113"></a><span class="lineno">  113</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       _std_g;</div><div class="line"><a name="l00114"></a><span class="lineno">  114</span>&#160;    <span class="keyword">const</span> <span class="keywordtype">float</span>       _std_b;</div><div class="line"><a name="l00115"></a><span class="lineno">  115</span>&#160;};</div><div class="line"><a name="l00116"></a><span class="lineno">  116</span>&#160;</div><div class="line"><a name="l00118"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">  118</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div><div class="line"><a name="l00119"></a><span class="lineno">  119</span>&#160;{</div><div class="line"><a name="l00120"></a><span class="lineno">  120</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00127"></a><span class="lineno">  127</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a>(<span class="keyword">const</span> std::string &amp;labels_path, <span class="keywordtype">size_t</span> top_n = 5, std::ostream &amp;output_stream = std::cout);</div><div class="line"><a name="l00129"></a><span class="lineno">  129</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00131"></a><span class="lineno">  131</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a>(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00133"></a><span class="lineno">  133</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a> &amp;operator=(<span class="keyword">const</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">TopNPredictionsAccessor</a> &amp;) = <span class="keyword">delete</span>;</div><div class="line"><a name="l00134"></a><span class="lineno">  134</span>&#160;</div><div class="line"><a name="l00135"></a><span class="lineno">  135</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div><div class="line"><a name="l00136"></a><span class="lineno">  136</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor) <span class="keyword">override</span>;</div><div class="line"><a name="l00137"></a><span class="lineno">  137</span>&#160;</div><div class="line"><a name="l00138"></a><span class="lineno">  138</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00139"></a><span class="lineno">  139</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt;</div><div class="line"><a name="l00140"></a><span class="lineno">  140</span>&#160;    <span class="keywordtype">void</span> access_predictions_tensor(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor);</div><div class="line"><a name="l00141"></a><span class="lineno">  141</span>&#160;</div><div class="line"><a name="l00142"></a><span class="lineno">  142</span>&#160;    std::vector&lt;std::string&gt; _labels;</div><div class="line"><a name="l00143"></a><span class="lineno">  143</span>&#160;    std::ostream            &amp;_output_stream;</div><div class="line"><a name="l00144"></a><span class="lineno">  144</span>&#160;    <span class="keywordtype">size_t</span>                   _top_n;</div><div class="line"><a name="l00145"></a><span class="lineno">  145</span>&#160;};</div><div class="line"><a name="l00146"></a><span class="lineno">  146</span>&#160;</div><div class="line"><a name="l00148"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml">  148</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml">RandomAccessor</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div><div class="line"><a name="l00149"></a><span class="lineno">  149</span>&#160;{</div><div class="line"><a name="l00150"></a><span class="lineno">  150</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00157"></a><span class="lineno">  157</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml">RandomAccessor</a>(<a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> lower, <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> upper, <span class="keyword">const</span> std::random_device::result_type seed = 0);</div><div class="line"><a name="l00159"></a><span class="lineno">  159</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml">RandomAccessor</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml">RandomAccessor</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00160"></a><span class="lineno">  160</span>&#160;</div><div class="line"><a name="l00161"></a><span class="lineno">  161</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div><div class="line"><a name="l00162"></a><span class="lineno">  162</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor) <span class="keyword">override</span>;</div><div class="line"><a name="l00163"></a><span class="lineno">  163</span>&#160;</div><div class="line"><a name="l00164"></a><span class="lineno">  164</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00165"></a><span class="lineno">  165</span>&#160;    <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T, <span class="keyword">typename</span> D&gt;</div><div class="line"><a name="l00166"></a><span class="lineno">  166</span>&#160;    <span class="keywordtype">void</span> fill(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor, D &amp;&amp;distribution);</div><div class="line"><a name="l00167"></a><span class="lineno">  167</span>&#160;    <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>                      _lower;</div><div class="line"><a name="l00168"></a><span class="lineno">  168</span>&#160;    <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a>                      _upper;</div><div class="line"><a name="l00169"></a><span class="lineno">  169</span>&#160;    std::random_device::result_type _seed;</div><div class="line"><a name="l00170"></a><span class="lineno">  170</span>&#160;};</div><div class="line"><a name="l00171"></a><span class="lineno">  171</span>&#160;</div><div class="line"><a name="l00173"></a><span class="lineno"><a class="line" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml">  173</a></span>&#160;<span class="keyword">class </span><a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml">NumPyBinLoader</a> final : <span class="keyword">public</span> <a class="code" href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">graph::ITensorAccessor</a></div><div class="line"><a name="l00174"></a><span class="lineno">  174</span>&#160;{</div><div class="line"><a name="l00175"></a><span class="lineno">  175</span>&#160;<span class="keyword">public</span>:</div><div class="line"><a name="l00180"></a><span class="lineno">  180</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml">NumPyBinLoader</a>(std::string filename);</div><div class="line"><a name="l00182"></a><span class="lineno">  182</span>&#160;    <a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml">NumPyBinLoader</a>(<a class="code" href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml">NumPyBinLoader</a> &amp;&amp;) = <span class="keywordflow">default</span>;</div><div class="line"><a name="l00183"></a><span class="lineno">  183</span>&#160;</div><div class="line"><a name="l00184"></a><span class="lineno">  184</span>&#160;    <span class="comment">// Inherited methods overriden:</span></div><div class="line"><a name="l00185"></a><span class="lineno">  185</span>&#160;    <span class="keywordtype">bool</span> <a class="code" href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#ab469d593b4bc92e1d1132a03de0aedca">access_tensor</a>(<a class="code" href="classarm__compute_1_1_i_tensor.xhtml">ITensor</a> &amp;tensor) <span class="keyword">override</span>;</div><div class="line"><a name="l00186"></a><span class="lineno">  186</span>&#160;</div><div class="line"><a name="l00187"></a><span class="lineno">  187</span>&#160;<span class="keyword">private</span>:</div><div class="line"><a name="l00188"></a><span class="lineno">  188</span>&#160;    <span class="keyword">const</span> std::string _filename;</div><div class="line"><a name="l00189"></a><span class="lineno">  189</span>&#160;};</div><div class="line"><a name="l00190"></a><span class="lineno">  190</span>&#160;</div><div class="line"><a name="l00199"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#ab7e905c7bfd2944e67bd069a3de3e7a2">  199</a></span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;graph::ITensorAccessor&gt; <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#ab7e905c7bfd2944e67bd069a3de3e7a2">get_random_accessor</a>(<a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> lower, <a class="code" href="classarm__compute_1_1_pixel_value.xhtml">PixelValue</a> upper, <span class="keyword">const</span> std::random_device::result_type seed = 0)</div><div class="line"><a name="l00200"></a><span class="lineno">  200</span>&#160;{</div><div class="line"><a name="l00201"></a><span class="lineno">  201</span>&#160;    <span class="keywordflow">return</span> arm_compute::support::cpp14::make_unique&lt;RandomAccessor&gt;(lower, upper, seed);</div><div class="line"><a name="l00202"></a><span class="lineno">  202</span>&#160;}</div><div class="line"><a name="l00203"></a><span class="lineno">  203</span>&#160;</div><div class="line"><a name="l00213"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#a73a37a4970294106ed22e8f916ef3810">  213</a></span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;graph::ITensorAccessor&gt; <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a73a37a4970294106ed22e8f916ef3810">get_weights_accessor</a>(<span class="keyword">const</span> std::string &amp;path, <span class="keyword">const</span> std::string &amp;data_file)</div><div class="line"><a name="l00214"></a><span class="lineno">  214</span>&#160;{</div><div class="line"><a name="l00215"></a><span class="lineno">  215</span>&#160;    <span class="keywordflow">if</span>(path.empty())</div><div class="line"><a name="l00216"></a><span class="lineno">  216</span>&#160;    {</div><div class="line"><a name="l00217"></a><span class="lineno">  217</span>&#160;        <span class="keywordflow">return</span> arm_compute::support::cpp14::make_unique&lt;DummyAccessor&gt;();</div><div class="line"><a name="l00218"></a><span class="lineno">  218</span>&#160;    }</div><div class="line"><a name="l00219"></a><span class="lineno">  219</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00220"></a><span class="lineno">  220</span>&#160;    {</div><div class="line"><a name="l00221"></a><span class="lineno">  221</span>&#160;        <span class="keywordflow">return</span> arm_compute::support::cpp14::make_unique&lt;NumPyBinLoader&gt;(path + data_file);</div><div class="line"><a name="l00222"></a><span class="lineno">  222</span>&#160;    }</div><div class="line"><a name="l00223"></a><span class="lineno">  223</span>&#160;}</div><div class="line"><a name="l00224"></a><span class="lineno">  224</span>&#160;</div><div class="line"><a name="l00240"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#ad58090d1facd6e56a9ebb9e40258f4b2">  240</a></span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;graph::ITensorAccessor&gt; <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#ad58090d1facd6e56a9ebb9e40258f4b2">get_input_accessor</a>(<span class="keyword">const</span> std::string &amp;ppm_path,</div><div class="line"><a name="l00241"></a><span class="lineno">  241</span>&#160;                                                                  <span class="keywordtype">float</span> mean_r = 0.f, <span class="keywordtype">float</span> mean_g = 0.f, <span class="keywordtype">float</span> mean_b = 0.f,</div><div class="line"><a name="l00242"></a><span class="lineno">  242</span>&#160;                                                                  <span class="keywordtype">float</span> std_r = 1.f, <span class="keywordtype">float</span> std_g = 1.f, <span class="keywordtype">float</span> std_b = 1.f,</div><div class="line"><a name="l00243"></a><span class="lineno">  243</span>&#160;                                                                  <span class="keywordtype">bool</span> bgr = <span class="keyword">true</span>)</div><div class="line"><a name="l00244"></a><span class="lineno">  244</span>&#160;{</div><div class="line"><a name="l00245"></a><span class="lineno">  245</span>&#160;    <span class="keywordflow">if</span>(ppm_path.empty())</div><div class="line"><a name="l00246"></a><span class="lineno">  246</span>&#160;    {</div><div class="line"><a name="l00247"></a><span class="lineno">  247</span>&#160;        <span class="keywordflow">return</span> arm_compute::support::cpp14::make_unique&lt;DummyAccessor&gt;();</div><div class="line"><a name="l00248"></a><span class="lineno">  248</span>&#160;    }</div><div class="line"><a name="l00249"></a><span class="lineno">  249</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00250"></a><span class="lineno">  250</span>&#160;    {</div><div class="line"><a name="l00251"></a><span class="lineno">  251</span>&#160;        <span class="keywordflow">return</span> arm_compute::support::cpp14::make_unique&lt;PPMAccessor&gt;(ppm_path, bgr,</div><div class="line"><a name="l00252"></a><span class="lineno">  252</span>&#160;                                                                     mean_r, mean_g, mean_b,</div><div class="line"><a name="l00253"></a><span class="lineno">  253</span>&#160;                                                                     std_r, std_g, std_b);</div><div class="line"><a name="l00254"></a><span class="lineno">  254</span>&#160;    }</div><div class="line"><a name="l00255"></a><span class="lineno">  255</span>&#160;}</div><div class="line"><a name="l00256"></a><span class="lineno">  256</span>&#160;</div><div class="line"><a name="l00263"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#a9216738b309b6b230b7ba8bca5ba7477">  263</a></span>&#160;<span class="keyword">inline</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a8d5e69e9a697c2007e241eb413c9833b">graph::TargetHint</a> <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#a9216738b309b6b230b7ba8bca5ba7477">set_target_hint</a>(<span class="keywordtype">int</span> target)</div><div class="line"><a name="l00264"></a><span class="lineno">  264</span>&#160;{</div><div class="line"><a name="l00265"></a><span class="lineno">  265</span>&#160;    <a class="code" href="core_2_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a>(target &gt; 1, <span class="stringliteral">&quot;Invalid target. Target must be 0 (NEON) or 1 (OpenCL)&quot;</span>);</div><div class="line"><a name="l00266"></a><span class="lineno">  266</span>&#160;    <span class="keywordflow">if</span>(target == 1 &amp;&amp; <a class="code" href="classarm__compute_1_1graph_1_1_graph.xhtml#aa8e898112793d13b363806c4332f1832">graph::Graph::opencl_is_available</a>())</div><div class="line"><a name="l00267"></a><span class="lineno">  267</span>&#160;    {</div><div class="line"><a name="l00268"></a><span class="lineno">  268</span>&#160;        <span class="comment">// If type of target is OpenCL, check if OpenCL is available and initialize the scheduler</span></div><div class="line"><a name="l00269"></a><span class="lineno">  269</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a8d5e69e9a697c2007e241eb413c9833ba542f952490e2db695a1d544338a70cda">graph::TargetHint::OPENCL</a>;</div><div class="line"><a name="l00270"></a><span class="lineno">  270</span>&#160;    }</div><div class="line"><a name="l00271"></a><span class="lineno">  271</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00272"></a><span class="lineno">  272</span>&#160;    {</div><div class="line"><a name="l00273"></a><span class="lineno">  273</span>&#160;        <span class="keywordflow">return</span> <a class="code" href="namespacearm__compute_1_1graph.xhtml#a8d5e69e9a697c2007e241eb413c9833bacaf162e9233294cadf62d2a71a14ca09">graph::TargetHint::NEON</a>;</div><div class="line"><a name="l00274"></a><span class="lineno">  274</span>&#160;    }</div><div class="line"><a name="l00275"></a><span class="lineno">  275</span>&#160;}</div><div class="line"><a name="l00276"></a><span class="lineno">  276</span>&#160;</div><div class="line"><a name="l00287"></a><span class="lineno"><a class="line" href="namespacearm__compute_1_1graph__utils.xhtml#aaf0c8eff756108c8bb23aecf51d44f79">  287</a></span>&#160;<span class="keyword">inline</span> std::unique_ptr&lt;graph::ITensorAccessor&gt; <a class="code" href="namespacearm__compute_1_1graph__utils.xhtml#aaf0c8eff756108c8bb23aecf51d44f79">get_output_accessor</a>(<span class="keyword">const</span> std::string &amp;labels_path, <span class="keywordtype">size_t</span> top_n = 5, std::ostream &amp;output_stream = std::cout)</div><div class="line"><a name="l00288"></a><span class="lineno">  288</span>&#160;{</div><div class="line"><a name="l00289"></a><span class="lineno">  289</span>&#160;    <span class="keywordflow">if</span>(labels_path.empty())</div><div class="line"><a name="l00290"></a><span class="lineno">  290</span>&#160;    {</div><div class="line"><a name="l00291"></a><span class="lineno">  291</span>&#160;        <span class="keywordflow">return</span> arm_compute::support::cpp14::make_unique&lt;DummyAccessor&gt;(0);</div><div class="line"><a name="l00292"></a><span class="lineno">  292</span>&#160;    }</div><div class="line"><a name="l00293"></a><span class="lineno">  293</span>&#160;    <span class="keywordflow">else</span></div><div class="line"><a name="l00294"></a><span class="lineno">  294</span>&#160;    {</div><div class="line"><a name="l00295"></a><span class="lineno">  295</span>&#160;        <span class="keywordflow">return</span> arm_compute::support::cpp14::make_unique&lt;TopNPredictionsAccessor&gt;(labels_path, top_n, output_stream);</div><div class="line"><a name="l00296"></a><span class="lineno">  296</span>&#160;    }</div><div class="line"><a name="l00297"></a><span class="lineno">  297</span>&#160;}</div><div class="line"><a name="l00298"></a><span class="lineno">  298</span>&#160;} <span class="comment">// namespace graph_utils</span></div><div class="line"><a name="l00299"></a><span class="lineno">  299</span>&#160;} <span class="comment">// namespace arm_compute</span></div><div class="line"><a name="l00300"></a><span class="lineno">  300</span>&#160;</div><div class="line"><a name="l00301"></a><span class="lineno">  301</span>&#160;<span class="preprocessor">#endif </span><span class="comment">/* __ARM_COMPUTE_GRAPH_UTILS_H__ */</span><span class="preprocessor"></span></div><div class="ttc" id="_pixel_value_8h_xhtml"><div class="ttname"><a href="_pixel_value_8h.xhtml">PixelValue.h</a></div></div>
<div class="ttc" id="classarm__compute_1_1_pixel_value_xhtml"><div class="ttname"><a href="classarm__compute_1_1_pixel_value.xhtml">arm_compute::PixelValue</a></div><div class="ttdoc">Class describing the value of a pixel for any image format. </div><div class="ttdef"><b>Definition:</b> <a href="_pixel_value_8h_source.xhtml#l00034">PixelValue.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_dummy_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_dummy_accessor.xhtml">arm_compute::graph_utils::DummyAccessor</a></div><div class="ttdoc">Dummy accessor class. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00063">GraphUtils.h:63</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph__utils_xhtml_aaf0c8eff756108c8bb23aecf51d44f79"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#aaf0c8eff756108c8bb23aecf51d44f79">arm_compute::graph_utils::get_output_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_output_accessor(const std::string &amp;labels_path, size_t top_n=5, std::ostream &amp;output_stream=std::cout)</div><div class="ttdoc">Generates appropriate output accessor according to the specified labels_path. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00287">GraphUtils.h:287</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph__utils_xhtml_ad58090d1facd6e56a9ebb9e40258f4b2"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#ad58090d1facd6e56a9ebb9e40258f4b2">arm_compute::graph_utils::get_input_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_input_accessor(const std::string &amp;ppm_path, float mean_r=0.f, float mean_g=0.f, float mean_b=0.f, float std_r=1.f, float std_g=1.f, float std_b=1.f, bool bgr=true)</div><div class="ttdoc">Generates appropriate input accessor according to the specified ppm_path. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00240">GraphUtils.h:240</a></div></div>
<div class="ttc" id="arm__compute_2graph_2_types_8h_xhtml"><div class="ttname"><a href="arm__compute_2graph_2_types_8h.xhtml">Types.h</a></div></div>
<div class="ttc" id="_graph_8h_xhtml"><div class="ttname"><a href="_graph_8h.xhtml">Graph.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a8d5e69e9a697c2007e241eb413c9833bacaf162e9233294cadf62d2a71a14ca09"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a8d5e69e9a697c2007e241eb413c9833bacaf162e9233294cadf62d2a71a14ca09">arm_compute::graph::TargetHint::NEON</a></div><div class="ttdoc">Run node on a NEON capable device. </div></div>
<div class="ttc" id="classarm__compute_1_1_i_tensor_xhtml"><div class="ttname"><a href="classarm__compute_1_1_i_tensor.xhtml">arm_compute::ITensor</a></div><div class="ttdoc">Interface for NEON tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_8h_source.xhtml#l00036">ITensor.h:36</a></div></div>
<div class="ttc" id="namespacearm__compute_xhtml"><div class="ttname"><a href="namespacearm__compute.xhtml">arm_compute</a></div><div class="ttdoc">This file contains all available output stages for GEMMLowp on OpenCL. </div><div class="ttdef"><b>Definition:</b> <a href="01__library_8dox_source.xhtml#l00001">01_library.dox:1</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph__utils_xhtml_a9216738b309b6b230b7ba8bca5ba7477"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#a9216738b309b6b230b7ba8bca5ba7477">arm_compute::graph_utils::set_target_hint</a></div><div class="ttdeci">graph::TargetHint set_target_hint(int target)</div><div class="ttdoc">Utility function to return the TargetHint. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00263">GraphUtils.h:263</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph__utils_xhtml_ab7e905c7bfd2944e67bd069a3de3e7a2"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#ab7e905c7bfd2944e67bd069a3de3e7a2">arm_compute::graph_utils::get_random_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_random_accessor(PixelValue lower, PixelValue upper, const std::random_device::result_type seed=0)</div><div class="ttdoc">Generates appropriate random accessor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00199">GraphUtils.h:199</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_p_p_m_writer_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml">arm_compute::graph_utils::PPMWriter</a></div><div class="ttdoc">PPM writer class. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00041">GraphUtils.h:41</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph__utils_xhtml_a73a37a4970294106ed22e8f916ef3810"><div class="ttname"><a href="namespacearm__compute_1_1graph__utils.xhtml#a73a37a4970294106ed22e8f916ef3810">arm_compute::graph_utils::get_weights_accessor</a></div><div class="ttdeci">std::unique_ptr&lt; graph::ITensorAccessor &gt; get_weights_accessor(const std::string &amp;path, const std::string &amp;data_file)</div><div class="ttdoc">Generates appropriate weights accessor according to the specified path. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00213">GraphUtils.h:213</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_num_py_bin_loader.xhtml">arm_compute::graph_utils::NumPyBinLoader</a></div><div class="ttdoc">Numpy Binary loader class. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00173">GraphUtils.h:173</a></div></div>
<div class="ttc" id="_i_tensor_accessor_8h_xhtml"><div class="ttname"><a href="_i_tensor_accessor_8h.xhtml">ITensorAccessor.h</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a8d5e69e9a697c2007e241eb413c9833ba542f952490e2db695a1d544338a70cda"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a8d5e69e9a697c2007e241eb413c9833ba542f952490e2db695a1d544338a70cda">arm_compute::graph::TargetHint::OPENCL</a></div><div class="ttdoc">Run node on an OpenCL capable device (GPU) </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_graph_xhtml_aa8e898112793d13b363806c4332f1832"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_graph.xhtml#aa8e898112793d13b363806c4332f1832">arm_compute::graph::Graph::opencl_is_available</a></div><div class="ttdeci">static bool opencl_is_available()</div><div class="ttdoc">Finalizes the current node&amp;#39;s configuration. </div></div>
<div class="ttc" id="classarm__compute_1_1graph_1_1_i_tensor_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph_1_1_i_tensor_accessor.xhtml">arm_compute::graph::ITensorAccessor</a></div><div class="ttdoc">Tensor accessor interface. </div><div class="ttdef"><b>Definition:</b> <a href="_i_tensor_accessor_8h_source.xhtml#l00034">ITensorAccessor.h:34</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_top_n_predictions_accessor.xhtml">arm_compute::graph_utils::TopNPredictionsAccessor</a></div><div class="ttdoc">Result accessor class. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00118">GraphUtils.h:118</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_p_p_m_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_p_p_m_accessor.xhtml">arm_compute::graph_utils::PPMAccessor</a></div><div class="ttdoc">PPM accessor class. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00083">GraphUtils.h:83</a></div></div>
<div class="ttc" id="core_2_error_8h_xhtml_a5bbdcf574d3f5e412fa6a1117911e67b"><div class="ttname"><a href="core_2_error_8h.xhtml#a5bbdcf574d3f5e412fa6a1117911e67b">ARM_COMPUTE_ERROR_ON_MSG</a></div><div class="ttdeci">#define ARM_COMPUTE_ERROR_ON_MSG(cond,...)</div><div class="ttdef"><b>Definition:</b> <a href="core_2_error_8h_source.xhtml#l00297">Error.h:297</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_p_p_m_writer_xhtml_ab469d593b4bc92e1d1132a03de0aedca"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#ab469d593b4bc92e1d1132a03de0aedca">arm_compute::graph_utils::PPMWriter::access_tensor</a></div><div class="ttdeci">bool access_tensor(ITensor &amp;tensor) override</div><div class="ttdoc">Interface to be implemented to access a given tensor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00042">GraphUtils.cpp:42</a></div></div>
<div class="ttc" id="namespacearm__compute_1_1graph_xhtml_a8d5e69e9a697c2007e241eb413c9833b"><div class="ttname"><a href="namespacearm__compute_1_1graph.xhtml#a8d5e69e9a697c2007e241eb413c9833b">arm_compute::graph::TargetHint</a></div><div class="ttdeci">TargetHint</div><div class="ttdoc">&lt; Execution hint to the graph executor </div><div class="ttdef"><b>Definition:</b> <a href="arm__compute_2graph_2_types_8h_source.xhtml#l00076">Types.h:76</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_p_p_m_writer_xhtml_a9ea94bf5b7d00ddb836df1b8dcedb93a"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_p_p_m_writer.xhtml#a9ea94bf5b7d00ddb836df1b8dcedb93a">arm_compute::graph_utils::PPMWriter::PPMWriter</a></div><div class="ttdeci">PPMWriter(std::string name, unsigned int maximum=1)</div><div class="ttdoc">Constructor. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8cpp_source.xhtml#l00037">GraphUtils.cpp:37</a></div></div>
<div class="ttc" id="classarm__compute_1_1graph__utils_1_1_random_accessor_xhtml"><div class="ttname"><a href="classarm__compute_1_1graph__utils_1_1_random_accessor.xhtml">arm_compute::graph_utils::RandomAccessor</a></div><div class="ttdoc">Random accessor class. </div><div class="ttdef"><b>Definition:</b> <a href="_graph_utils_8h_source.xhtml#l00148">GraphUtils.h:148</a></div></div>
</div><!-- fragment --></div><!-- contents -->
</div><!-- doc-content -->
<!-- start footer part -->
<div id="nav-path" class="navpath"><!-- id is needed for treeview function! -->
  <ul>
    <li class="navelem"><a class="el" href="dir_cbdb8362360e11eafe2fa3bc74cf0ffd.xhtml">utils</a></li><li class="navelem"><a class="el" href="_graph_utils_8h.xhtml">GraphUtils.h</a></li>
    <li class="footer">Generated on Wed Jan 24 2018 14:30:42 for Compute Library by
    <a href="http://www.doxygen.org/index.html">
    <img class="footer" src="doxygen.png" alt="doxygen"/></a> 1.8.11 </li>
  </ul>
</div>
</body>
</html>
